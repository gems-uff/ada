/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.uff.ic.archd.db.dao;

import br.uff.ic.archd.javacode.JavaAbstract;
import br.uff.ic.archd.javacode.JavaClass;
import br.uff.ic.archd.javacode.JavaExternalAttributeAccess;
import br.uff.ic.archd.javacode.JavaMethod;
import br.uff.ic.archd.javacode.JavaProject;
import java.io.File;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

/**
 *
 * @author wallace
 */
public class HsqldbJavaExternalAttributeAccessDao implements JavaExternalAttributeAccessDao{
    private Connection connection;

    public HsqldbJavaExternalAttributeAccessDao() {
        try {
            File file = new File(Constants.DB_DIR);
            if (!file.exists()) {
                file.mkdirs();

            }
            Class.forName("org.hsqldb.jdbcDriver");
            connection = DriverManager.getConnection("jdbc:hsqldb:file:" + Constants.DB_DIR, "archd", "123");
            DatabaseMetaData dbData = connection.getMetaData();
            ResultSet tables = dbData.getTables(null, null, "JAVA_EXTERNAL_ATTRIBUTE_ACCESS", null);
            //System.out.println("NEXT "+tables.next());
            if (!tables.next()) {


                System.out.println("NAO POSSUI TABELA JAVA_EXTERNAL_ATTRIBUTE_ACCESS");
                Statement stm = connection.createStatement();

                stm.executeUpdate("create table JAVA_EXTERNAL_ATTRIBUTE_ACCESS (id bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), "
                        + "method_id bigint,"
                        + "class_id bigint,"
                        + "interface_id bigint,"
                        + "attribute_name varchar(1000),"
                        + "PRIMARY KEY (id),"
                        + "FOREIGN KEY (method_id) REFERENCES JAVA_METHODS(id),"
                        + "FOREIGN KEY (class_id) REFERENCES JAVA_CLASSES(id),"
                        + "FOREIGN KEY (interface_id) REFERENCES JAVA_INTERFACES(id));");
            } else {
                System.out.println("TABELA JAH EXISTE JAVA_CLASSES");
            }

            //stm.execute("SHUTDOWN");

        } catch (ClassNotFoundException e) {
            System.out.println("Erro ao carregar o driver JDBC. " + e.getMessage());
        } catch (SQLException e) {
            System.out.println("Erro de SQL: " + e.getMessage());
            //e.printStackTrace();
        } catch (Exception e) {
            System.out.println("ERRO " + e.getMessage());
        }


    }

    @Override
    public void saveJavaExternalAttributeAccess(JavaMethod javaMethod) {
        try {
            Statement stm = connection.createStatement();
            for (JavaExternalAttributeAccess javaExternalAttributeAccess : javaMethod.getJavaExternalAttributeAccessList()) {
                JavaAbstract javaAbstract = javaExternalAttributeAccess.getJavaAbstract();
                if (javaAbstract.getClass() == JavaClass.class) {
                    System.out.println("insert into JAVA_EXTERNAL_ATTRIBUTE_ACCESS (method_id, class_id , attribute_name) "
                                + " VALUES (" +javaMethod.getId()+","+ javaAbstract.getId() + ",'" + javaExternalAttributeAccess.getAttributeName() + "');");
                    stm.executeUpdate("insert into JAVA_EXTERNAL_ATTRIBUTE_ACCESS (method_id, class_id , attribute_name) "
                                + " VALUES (" +javaMethod.getId()+","+ javaAbstract.getId() + ",'" + javaExternalAttributeAccess.getAttributeName() + "');");
                    
                } else {
                    System.out.println("insert into JAVA_EXTERNAL_ATTRIBUTE_ACCESS (method_id, interface_id , attribute_name) "
                            + " VALUES (" +javaMethod.getId()+","+ javaAbstract.getId() + ",'" + javaExternalAttributeAccess.getAttributeName() + "');");
                    stm.executeUpdate("insert into JAVA_EXTERNAL_ATTRIBUTE_ACCESS (method_id, interface_id , attribute_name) "
                            + " VALUES (" +javaMethod.getId()+","+ javaAbstract.getId() + ",'" + javaExternalAttributeAccess.getAttributeName() + "');");
                }
            }
            
        } catch (SQLException e) {
            System.out.println("ERRO saveJavaExternalAttributeAccess: " + e.getMessage());
        }
    }

    @Override
    public void getJavaExternalAttributeAccessByMethod(JavaMethod javaMethod, JavaProject javaProject) {
        try {
            Statement stm = connection.createStatement();
            ResultSet rs = null;
            //long t1 = System.currentTimeMillis();
            rs = stm.executeQuery("select * from JAVA_EXTERNAL_ATTRIBUTE_ACCESS where method_id=" + javaMethod.getId() + ";");
            //long t2 = System.currentTimeMillis();
            //System.out.println("Pegar todas as invocações de métodos de uma classe de uma revisão (somente o select) : "+(t2-t1)+"  milisegundos");
            
            int i = 0;

            while (rs.next()) {
                
                String classId = rs.getString("class_id");
                String interfaceId = rs.getString("interface_id");
                String attributeName = rs.getString("attribute_name");
                JavaAbstract javaAbstract = null;
                if(classId != null){
                    javaAbstract = javaProject.getClassById(Long.valueOf(classId));
                }else{
                    javaAbstract = javaProject.getInterfaceById(Long.valueOf(interfaceId));
                }
                
                JavaExternalAttributeAccess javaExternalAttributeAccess = new JavaExternalAttributeAccess(javaAbstract, attributeName);
                javaMethod.addExternalAttributeAccess(javaExternalAttributeAccess);

                i++;
            }
            //stm.execute("SHUTDOWN");
            //System.out.println("QUANTIDADE: " + i);
        } catch (Exception e) {
            System.out.println("ERRO getJavaExternalAttributeAccessByMethod: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
