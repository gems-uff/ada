/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.uff.ic.archd.db.dao;

import java.io.File;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;

/**
 *
 * @author wallace
 */
public class HsqldbAnomalieDao implements AnomalieDao {
    private Connection connection;

    public HsqldbAnomalieDao() {
        try {
            File file = new File(Constants.DB_DIR);
            if (!file.exists()) {
                file.mkdirs();

            }
            Class.forName("org.hsqldb.jdbcDriver");
            connection = DriverManager.getConnection("jdbc:hsqldb:file:" + Constants.DB_DIR, "archd", "123");
            DatabaseMetaData dbData = connection.getMetaData();
            ResultSet tables = dbData.getTables(null, null, "ANOMALIES", null);
            //System.out.println("NEXT "+tables.next());
            if (!tables.next()) {


                System.out.println("NAO POSSUI TABELA ANOMALIES");
                Statement stm = connection.createStatement();
                
                stm.executeUpdate("create table ANOMALIES (id bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), "
                        + "anomalie_id int,"
                        + "item_name varchar(1000),"
                        + "revision_id varchar(1000),"
                        + "PRIMARY KEY (id));");
                stm.executeUpdate("create index revision_id on ANOMALIES (revision_id);");

                /*stm.executeUpdate("create table JAVA_CLASSES (id bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), "
                        + "name varchar(1000),"
                        + "superclass varchar(1000),"
                        + "path varchar(1000),"
                        + "revision_id varchar(1000),"
                        + "access_to_foreign_data_number int,"
                        + "number_of_direct_connections int,"
                        + "PRIMARY KEY (id));");*/
            } else {
                System.out.println("TABELA JAH EXISTE ANOMALIES");
            }

            //stm.execute("SHUTDOWN");

        } catch (ClassNotFoundException e) {
            System.out.println("Erro ao carregar o driver JDBC. " + e.getMessage());
        } catch (SQLException e) {
            System.out.println("Erro de SQL: " + e.getMessage());
            //e.printStackTrace();
        } catch (Exception e) {
            System.out.println("ERRO " + e.getMessage());
        }


    }
    
    public void save(int anomalieId, String itemName, String revisionId){
        try {
            Statement stm = connection.createStatement();
            System.out.println("insert into ANOMALIES (anomalie_id ,"
                        + "item_name ,"
                        + "revision_id )"
                        + " VALUES (" + anomalieId + ",'"
                        + itemName + "','"
                        + revisionId+ "'"
                        + ");");
            stm.executeUpdate("insert into ANOMALIES (anomalie_id ,"
                        + "item_name ,"
                        + "revision_id )"
                        + " VALUES (" + anomalieId + ",'"
                        + itemName + "','"
                        + revisionId+ "'"
                        + ");");
        } catch (SQLException e) {
            System.out.println("ERRO save anomalie: " + e.getMessage());
        }
    }
    
    public List<AnomalieItem> getItemsByRevisionId(String revisionId){
        List<AnomalieItem> items = new LinkedList();
        try {
            Statement stm = connection.createStatement();
            
            //long t1 = System.currentTimeMillis();           
            ResultSet rs = stm.executeQuery("select * from ANOMALIES where revision_id='" + revisionId + "';");
            int i = 0;
            while (rs.next()) {
                AnomalieItem anomalieItem = new AnomalieItem(Integer.valueOf(rs.getString("anomalie_id")), rs.getString("item_name"));
                items.add(anomalieItem);
                i++;
            }
        } catch (Exception e) {
            System.out.println("ERRO anomalie: " + e.getMessage());
        }
        
        return items;
    }
    
    /*public void drop(){
        try {
            Statement stm = connection.createStatement();
            //stm.executeQuery("DROP INDEX revision_id;");
            stm.execute("drop table ANOMALIES;");
            ResultSet rs = stm.executeQuery("select * from ANOMALIES;");
            int i = 0;
            
            while (rs.next()) {
                i++  ;  
                System.out.println("Anomalie: "+rs.getString("id")+"   -  "+rs.getString("revision_id"));
                int n = stm.executeUpdate("delete from ANOMALIES where id = "+rs.getString("id")+";");
                System.out.println("Resultado: "+n);
            }
            
            System.out.println("Tamanho total de ANOMALIES: "+i);
            //stm.executeUpdate("create index revision_id on ANOMALIES (revision_id);");
            System.out.println("delete from ANOMALIES where id > 0;");
            stm.executeUpdate("delete from ANOMALIES where id > 0;");
            System.out.println("Dropou o banco");
            
        } catch (SQLException e) {
            System.out.println("ERRO save anomalie: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    public static void main(String args[]){
        HsqldbAnomalieDao hsqldbAnomalieDao = new HsqldbAnomalieDao();
        hsqldbAnomalieDao.drop();
    }*/
}
