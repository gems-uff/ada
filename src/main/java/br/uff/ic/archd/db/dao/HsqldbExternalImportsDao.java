/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.uff.ic.archd.db.dao;

import br.uff.ic.archd.javacode.JavaAbstract;
import br.uff.ic.archd.javacode.JavaAbstractExternal;
import br.uff.ic.archd.javacode.JavaClass;
import br.uff.ic.archd.javacode.JavaProject;
import java.io.File;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;

/**
 *
 * @author wallace
 */
public class HsqldbExternalImportsDao implements ExternalImportsDao{

    private final static String DB_DIR = System.getProperty("user.home") + "/.archDB/METRIC_VALUE_DB_DIR/";
    private Connection connection;
    
    HsqldbExternalImportsDao(){
        try {
            File file = new File(DB_DIR);
            if(!file.exists()){
                file.mkdirs();
                
            }
            Class.forName("org.hsqldb.jdbcDriver");
            connection = DriverManager.getConnection("jdbc:hsqldb:file:" + DB_DIR, "archd", "123");
            DatabaseMetaData dbData = connection.getMetaData();
            ResultSet tables = dbData.getTables(null, null, "EXTERNAL_IMPORTS", null);
            //System.out.println("NEXT "+tables.next());
            if (!tables.next()) {


                System.out.println("NAO POSSUI TABELA");
                Statement stm = connection.createStatement();

                stm.executeUpdate("create table EXTERNAL_IMPORTS (id bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), "
                        + "class_id bigint,"
                        + "interface_id bigint,"
                        + "external_import varchar(1000));");
            } else {
                System.out.println("TABELA JAH EXISTE");
            }

            //stm.execute("SHUTDOWN");

        } catch (ClassNotFoundException e) {
            System.out.println("Erro ao carregar o driver JDBC. ");
        } catch (SQLException e) {
            System.out.println("Erro de SQL: " + e);
            //e.printStackTrace();
        } catch (Exception e) {
            System.out.println("ERRO " + e.getMessage());
        }
    }
    @Override
    public void save(JavaAbstract javaAbstract, String externalImport) {
        try {
            Statement stm = connection.createStatement();
            if (javaAbstract.getClass() == JavaClass.class) {
                System.out.println("insert into EXTERNAL_IMPORTS (class_id , external_import) "
                            + " VALUES (" + javaAbstract.getId() + ",'"+externalImport+"');");
                    stm.executeUpdate("insert into EXTERNAL_IMPORTS (class_id , external_import) "
                            + " VALUES (" + javaAbstract.getId() + ",'"+externalImport+"');");
                
            } else {
                System.out.println("insert into EXTERNAL_IMPORTS (interface_id , external_import) "
                            + " VALUES (" + javaAbstract.getId() + ",'"+externalImport+"');");
                    stm.executeUpdate("insert into EXTERNAL_IMPORTS (interface_id , external_import) "
                            + " VALUES (" + javaAbstract.getId() + ",'"+externalImport+"');");
                
            }

        } catch (SQLException e) {
            System.out.println("ERRO external imports: " + e.getMessage());
        }
    }

    @Override
    public void getExternalImports(JavaAbstract javaAbstract, JavaProject javaProject) {
        try {
            Statement stm = connection.createStatement();
            ResultSet rs = null;
            if(javaAbstract.getClass() == JavaClass.class){
                rs = stm.executeQuery("select * from EXTERNAL_IMPORTS where class_id=" + javaAbstract.getId() + ";");
            }else{
                rs = stm.executeQuery("select * from EXTERNAL_IMPORTS where interface_id=" + javaAbstract.getId() + ";");
            }
            
            int i = 0;

            while (rs.next()) {
                
                String externalImport = rs.getString("external_import");
                JavaAbstractExternal javaAbstractExternal = javaProject.getJavaExternalClassByName(externalImport);
                if(javaAbstractExternal == null){
                    javaAbstractExternal = new JavaAbstractExternal(externalImport);
                    javaProject.addExternalClass(javaAbstractExternal);
                }
                javaAbstract.addExternalImport(externalImport);
                
                
               
                i++;
            }
            //stm.execute("SHUTDOWN");
            //System.out.println("QUANTIDADE: " + i);
        } catch (Exception e) {
            System.out.println("ERRO external imports: " + e.getMessage());
        }
    }
    
}
